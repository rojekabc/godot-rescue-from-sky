[gd_scene load_steps=8 format=2]

[ext_resource path="res://Resources/PanelStyle.tres" type="StyleBox" id=1]
[ext_resource path="res://Resources/TitleStyle.tres" type="StyleBox" id=2]
[ext_resource path="res://Resources/TitleFont.tres" type="DynamicFont" id=3]
[ext_resource path="res://Resources/LabelFont.tres" type="DynamicFont" id=4]

[sub_resource type="GDScript" id=1]

resource_name = "World"
script/source = "extends Node

var selectTarget = null

func _ready():
	# Enable randomization
	randomize()
	# Hide templates
	Tool.children_action($Map/UI, 'hide')
	# Start timestamp calculation from beginig of play
	$Timer.wait_time = Game.CONFIGURATION.timertick
	$Timer.connect('timeout', self, \"_timeout\")
	# Prepare materials
	_prepare_materials()
	# Crate real map
	_map_create()
	# Start all transport moves with monitoring them
	$Tween.start()
	$Tween.connect('tween_completed', self, '_tween_completed')
	# Enable mouse press processing
	set_process_input( true )
	pass

func _status(msg):
	$Map/UI/Status.status(msg)
	
func _info(msg):
	$Map/UI/Status.info(msg)
	
func _fail(msg):
	$Map/UI/Status.fail(msg)
	
func _input(event):
	if event is InputEventMouseButton and event.is_pressed() and event.button_index == BUTTON_LEFT:
		if selectTarget:
			_select_target_action(event.global_position)
		elif $Map/UI/Suqad.visible:
			return
		else:
			var strPressed = _find_structure_at(event.global_position)
			if strPressed:
				strPressed.pressed(self)
	pass

func _select_target_action(globalPosition):
	var target = _find_element_at(globalPosition)
	if target == null:
		return _fail('Nothing selected')
	if target.is_in_group('Structure'):
		if target == selectTarget.source:
			return _fail('Cannot select itself')
		if target.ownerIdx == selectTarget.source.ownerIdx:
			if target.type == Game.AIRPORT:
				_info('Planned move to ' + target.get_name())
			else:
				return _fail('Unknown mission against your structure')
		else:
			_info('Planned bombarding of ' + target.get_name())
	elif target.is_in_group('Transport'):
		if target.ownerIdx == selectTarget.source.ownerIdx:
			return _fail('Unknown mission against your transport')
		else:
			_info('Planned bombarding of ' + target.get_name())
	elif target.is_in_group('Squad'):
		if target.ownerIdx == selectTarget.source.ownerIdx:
			return _fail('Unknown mission against your squad')
		else:
			_info('Planned attack on ' + target.get_name())
	else:
		return _fail('Unknown mission')
	selectTarget.target = target
	squad_start(selectTarget.source, target, selectTarget.planes)
	selectTarget = null

# Find element under point. From the list the structure will be always selected as more priority.
# If nothing from possible elements (Structure, Transport) return null
const COLLISION_MASK = 1
func _find_element_at(globalPosition):
	var selected = null
	var results = get_world_2d().direct_space_state.intersect_point(globalPosition, 4, [], COLLISION_MASK)
	if results:
		for result in results:
			var collider = result.collider
			if collider.is_in_group('Structure'):
				selected = collider
				break
			elif collider.is_in_group('Transport'):
				selected = collider
			elif collider.is_in_group('Squad'):
				selected = collider
	return selected

func _find_structure_at(global_position):
	for structure in $Map/Structures.get_children():
		var rect = Rect2(
			structure.global_position.x-structure.HALF_SIZE, structure.global_position.y-structure.HALF_SIZE,
			structure.FULL_SIZE, structure.FULL_SIZE)
		if rect.has_point(global_position):
			return structure;
	return null

func _find_structures_at(global_positions):
	var result = []
	for pos in global_positions:
		var structure = _find_structure_at(pos)
		if structure:
			result.append(structure)
	return result

func _prepare_materials():
	for playerDefinition in Game.playerDefinitions:
		playerDefinition.structureMaterial = Game.Structure.get_node('Sprite').material.duplicate()
		playerDefinition.structureMaterial.set('shader_param/color', playerDefinition.color)
		playerDefinition.armyMaterial = Game.Army.get_node('Sprite').material.duplicate()
		playerDefinition.armyMaterial.set('shader_param/color', playerDefinition.color)

func _timeout():
	Game.timetick += 1

# Create map
# Don't allow to cross other structure on the map
func _map_create():
	for ownerIdx in range(2):
		for strType in Game.STRUCTURE.values():
			var structure = _structure_create(ownerIdx, strType)
			if structure.type == Game.AIRPORT:
				structure.PlaneHolder.add_plane(_airplane_create(ownerIdx, Game.FIGHTER))
				structure.PlaneHolder.add_plane(_airplane_create(ownerIdx, Game.BOMBER))
			while not _find_structures_at(structure.get_corners()).empty():
				Game.verbose('Fix structure collision')
				structure.random_position(ownerIdx)
			$Map/Structures.add_child(structure)
	_create_resource_network()

# Create consumer-suplier network
func _create_resource_network():
	for structure in $Map/Structures.get_children():
		for consume in structure.Consumer.list():
			var suppliers = _find_producers_of(structure.ownerIdx, consume)
			var supplier = _find_best_supplier(structure, suppliers)
			if supplier:
				structure.set_suplier(consume, supplier)
				supplier.register_consumer(consume, structure)

func _find_best_supplier(structure, suppliers):
	if (suppliers == null) or suppliers.empty():
		return null
	var bestSuplierDistance = 1000000
	var bestSupplierIdx = -1
	var suplierIdx = 0
	for suplier in suppliers:
		var distance = (structure.position - suplier.position).length()
		if distance < bestSuplierDistance:
			bestSuplierDistance = distance
			bestSupplierIdx = suplierIdx
		suplierIdx += 1
	return suppliers[bestSupplierIdx]

func _find_producers_of(ownerIdx, resource):
	var result = []
	for structure in $Map/Structures.get_children():
		if structure.ownerIdx != ownerIdx:
			continue
		if structure.Producer.is_producing(resource):
			result.append(structure)
	return result

func _fix_panel_position(panel, callerPosition):
	# positioning
	var margin = 10
	var uiWidth = panel.rect_size.x
	if callerPosition.x < Game.MAP_WIDTH/2:
		panel.rect_position = Vector2(Game.MAP_WIDTH - uiWidth - margin, margin)
	else:
		panel.rect_position = Vector2(margin, margin)

func select_target(airport, planes):
	selectTarget = {
		source = airport,
		planes = planes
	}
	_status('Select target')
	pass

func ui_squad_panel(airport):
	var panel = $Map/UI/Suqad
	panel.set_airport(airport)
	_fix_panel_position(panel, airport.position)
	pass

func squad_start(source, target, planes):
	var squad = Game.Squad.duplicate()
	squad.visible = true
	squad.position = source.position
	squad.ownerIdx = source.ownerIdx
	squad.Moveable.assign(source, target)
	source.PlaneHolder.rem_planes(planes)
	squad.PlaneHolder.add_planes(planes)
	$Map/Squads.add_child(squad)
	_calculate_move_tween(squad)

func transport_start(sourceStructure, targetStructure, transportedResource):
	var transport = _transport_create(sourceStructure, targetStructure, transportedResource)
	if sourceStructure == targetStructure:
		transport.complete()
		return
	transport.visible = true
	$Map/Transports.add_child(transport)
	var distance = (targetStructure.position - sourceStructure.position).length()
	$Tween.interpolate_property(
		transport, \"position\",
		sourceStructure.position, targetStructure.position,
		distance/Game.CONFIGURATION.transportSpeed*$Timer.wait_time,
		Tween.TRANS_LINEAR, Tween.EASE_OUT_IN)

func _calculate_move_tween(moveObject):
	var move = moveObject.Moveable.calculate_move()
	$Tween.interpolate_property(moveObject, \"position\",
		moveObject.position, move.position,
		move.time, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
	pass

# Call by tween signal
func _tween_completed(object, key):
	if object.is_in_group(\"Transport\"):
		object.complete()
		# $Tween.remove(object, key)
	elif object.is_in_group(\"Squad\"):
		$Tween.remove(object, key)
		_calculate_move_tween(object)
	elif object.is_in_group(\"Army\"):
		$Tween.remove(object, key)
		# Check that are any new closest target
		var target = army_find_target(object)
		object.Moveable.assign_target(target)
		_calculate_move_tween(object)
	pass

func _transport_create(sourceStructure, targetStructure, transportedResource):
	var transport = Game.Transport.duplicate()
	transport.setup(sourceStructure, targetStructure, transportedResource)
	return transport

func _structure_create(ownerIdx, type):
	var structure = Game.Structure.duplicate()
	structure.assign_type(type, $Timer)
	structure.visible = true
	structure.ownerIdx = ownerIdx
	structure.random_position(ownerIdx)
	structure.get_node('Sprite').material = Game.playerDefinitions[ownerIdx].structureMaterial
	return structure

func _airplane_create(ownerIdx, type):
	var airplane = Game.AirPlane.new(ownerIdx, type)
	return airplane

func army_find_target_from_array(source, array):
	var target = null
	var distance = 20000
	for child in array:
		var targetDistance = (child.position - source.position).length()
		if (source.ownerIdx != child.ownerIdx 
		and targetDistance < distance 
		and not child.Destructable.is_destroyed()):
			target = child
			distance = targetDistance
	return target

func army_find_target_overlaps(source, array):
	var target = null
	for child in array:
		if (source.ownerIdx != child.ownerIdx
			and source.overlaps_area(child)
			and not child.Destructable.is_destroyed()):
			return child
	return null

func army_find_target(source):
	var closest = []
	var closest_structure = army_find_target_from_array(source, $Map/Structures.get_children())
	if closest_structure: closest.append(closest_structure)
	var closest_army = army_find_target_from_array(source, $Map/Armies.get_children())
	if closest_army: closest.append(closest_army)
	var overlaps_transport = army_find_target_overlaps(source, $Map/Transports.get_children())
	if overlaps_transport: return overlaps_transport
	return army_find_target_from_array(source, closest)
	

func army_create(source, target):
	var army = Game.create(Game.Army)
	army.id = Game.get_army_id()
	army.ownerIdx = source.ownerIdx
	army.Moveable.assign(source, target)
	army.Moveable.speed = Game.CONFIGURATION.transportSpeed
	army.get_node('Sprite').material = Game.playerDefinitions[army.ownerIdx].armyMaterial
	return army

func army_start(source, target):
	var army = army_create(source, target)
	Game.verbose('Send ' + army.get_name() + ' to attack ' + target.get_name())
	army.visible = true
	army.position = source.position
	$Map/Armies.add_child(army)
	_calculate_move_tween(army)
	pass
	"
_sections_unfolded = [ "Resource" ]

[sub_resource type="GDScript" id=2]

resource_name = "UISquad"
script/source = "extends PanelContainer

var airport = null

func _ready():
	$Container/Columns/Actions/Target.connect('pressed', self, '_target_pressed')
	$Container/Title.connect('gui_input', self, '_title_gui_input')
	pass

func _title_gui_input(event):
	if event is InputEventMouseButton and event.is_pressed():
		$Container/Title.accept_event()
		clear_planes()
		_detach_airport_view()

func _target_pressed():
	var planes = _list_selected_planes()
	if planes.empty():
		Game.getWorld()._info('Select any plane')
		return
	Game.getWorld().select_target(airport, planes)
	_detach_airport_view()
	pass

func _detach_airport_view():
	airport.disconnect('update_planes', self, '_sig_update_planes')
	hide()
	airport = null
	return 0

func _attach_airport_view(airport):
	show()
	self.airport = airport
	airport.connect('update_planes', self, '_sig_update_planes')
	return 0

func _sig_update_planes(object, planes):
	update_planes()
	pass

func _list_selected_planes():
	var result = []
	for checkbox in $Container/Columns/Planes/Container.get_children():
		if checkbox.pressed:
			result.append(checkbox.get_meta('plane'))
	return result

func update_planes():
	if airport == null:
		return
	var planes = airport.PlaneHolder.planes.duplicate()
	for child in $Container/Columns/Planes/Container.get_children():
		var uiplane = child.get_meta('plane')
		if airport.PlaneHolder.planes.has(uiplane):
			planes.erase(uiplane)
		else:
			$Container/Columns/Planes/Container.remove_child(child)
			child.queue_free()
	for plane in planes:
		append_plane(plane)

func clear_planes():
	for child in $Container/Columns/Planes/Container.get_children():
		$Container/Columns/Planes/Container.remove_child(child)
		child.queue_free()

func append_plane(plane):
	var checkbox = CheckBox.new()
	if plane.type == Game.FIGHTER:
		checkbox.text = 'Fighter'
	else:
		checkbox.text = 'Bomber'
	checkbox.set_meta('plane', plane)
	$Container/Columns/Planes/Container.add_child(checkbox)

func append_planes(planesData):
	for plane in planesData:
		append_plane(plane)

func set_airport(airport):
	clear_planes()
	if self.airport == airport:
		return _detach_airport_view()
	else:
		if self.airport != null:
			_detach_airport_view()
		_attach_airport_view(airport)
	append_planes(self.airport.PlaneHolder.planes)
	pass
"
_sections_unfolded = [ "Resource" ]

[sub_resource type="GDScript" id=3]

script/source = "extends Label

var startTick

const STATUS_COLOR = Color(1, 1, 1, 0.6)
const INFO_COLOR = Color(0, 1, 1, 0.6)
const FAIL_COLOR = Color(1, 0, 0, 0.6)

func _ready():
	Game.getTimer().connect('timeout', self, '_timeout')
	pass
	
func _timeout():
	if visible and Game.timetick > startTick + 2:
		visible = false
	pass

func _status(msg, color):
	text = msg
	modulate = color
	visible = true
	startTick = Game.timetick
	

func status(msg):
	_status(msg, STATUS_COLOR)
	pass

func info(msg):
	_status(msg, INFO_COLOR)

func fail(msg):
	_status(msg, FAIL_COLOR)
"
_sections_unfolded = [ "Resource" ]

[node name="World" type="Node2D" index="0"]

script = SubResource( 1 )

[node name="Map" type="Node" parent="." index="0"]

[node name="Structures" type="Node" parent="Map" index="0"]

[node name="Squads" type="Node" parent="Map" index="1"]

[node name="Transports" type="Node" parent="Map" index="2"]

[node name="Armies" type="Node" parent="Map" index="3"]

[node name="UI" type="Container" parent="Map" index="4"]

editor/display_folded = true
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 1024.0
margin_bottom = 600.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
_sections_unfolded = [ "Rect" ]

[node name="Suqad" type="PanelContainer" parent="Map/UI" index="0"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 377.0
margin_top = 180.0
margin_right = 643.0
margin_bottom = 449.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
custom_styles/panel = ExtResource( 1 )
script = SubResource( 2 )
_sections_unfolded = [ "Visibility", "custom_styles" ]
__meta__ = {
"_edit_group_": true
}

[node name="Container" type="VBoxContainer" parent="Map/UI/Suqad" index="0"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 10.0
margin_top = 10.0
margin_right = 256.0
margin_bottom = 259.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 1
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
alignment = 0

[node name="Title" type="Label" parent="Map/UI/Suqad/Container" index="0"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 246.0
margin_bottom = 45.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 1
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 4
custom_styles/normal = ExtResource( 2 )
custom_fonts/font = ExtResource( 3 )
text = "Squad"
align = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1
_sections_unfolded = [ "Mouse", "custom_fonts", "custom_styles" ]

[node name="Columns" type="HBoxContainer" parent="Map/UI/Suqad/Container" index="1"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 49.0
margin_right = 246.0
margin_bottom = 249.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 1
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
alignment = 0

[node name="Planes" type="ScrollContainer" parent="Map/UI/Suqad/Container/Columns" index="0"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 171.0
margin_bottom = 200.0
rect_min_size = Vector2( 150, 200 )
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = true
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 3
size_flags_vertical = 1
scroll_horizontal_enabled = true
scroll_horizontal = 0
scroll_vertical_enabled = true
scroll_vertical = 0
scroll_deadzone = 0
_sections_unfolded = [ "Rect", "Size Flags" ]

[node name="Container" type="VBoxContainer" parent="Map/UI/Suqad/Container/Columns/Planes" index="0"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 171.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 1
mouse_default_cursor_shape = 0
size_flags_horizontal = 3
size_flags_vertical = 1
alignment = 0
_sections_unfolded = [ "Size Flags" ]

[node name="Actions" type="VBoxContainer" parent="Map/UI/Suqad/Container/Columns" index="1"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 175.0
margin_right = 246.0
margin_bottom = 200.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 1
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
alignment = 0

[node name="Target" type="Button" parent="Map/UI/Suqad/Container/Columns/Actions" index="0"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 71.0
margin_bottom = 33.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
focus_mode = 2
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
custom_fonts/font = ExtResource( 4 )
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
text = "Target"
flat = false
align = 1
_sections_unfolded = [ "custom_fonts" ]

[node name="Patrol" type="Button" parent="Map/UI/Suqad/Container/Columns/Actions" index="1"]

visible = false
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 37.0
margin_right = 71.0
margin_bottom = 70.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
focus_mode = 2
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
custom_fonts/font = ExtResource( 4 )
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
text = "Patrol"
flat = false
align = 1
_sections_unfolded = [ "custom_fonts" ]

[node name="Status" type="Label" parent="Map/UI" index="1"]

anchor_left = 0.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -90.0
margin_bottom = -50.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 2
mouse_default_cursor_shape = 0
size_flags_horizontal = 3
size_flags_vertical = 4
custom_fonts/font = ExtResource( 4 )
text = "Status message"
align = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1
script = SubResource( 3 )
_sections_unfolded = [ "Anchor", "Margin", "Rect", "Size Flags", "Visibility", "custom_fonts" ]

[node name="Label" type="Label" parent="Map" index="5"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 1.0
anchor_bottom = 0.0
margin_left = 963.0
margin_bottom = 15.0
grow_horizontal = 0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 2
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 4
text = " v1.1.0 \"Armies go to war\""
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin" ]

[node name="Timer" type="Timer" parent="." index="1"]

process_mode = 1
wait_time = 1.0
one_shot = false
autostart = true

[node name="Tween" type="Tween" parent="." index="2"]

repeat = false
playback_process_mode = 1
playback_speed = 1.0
playback/active = false
playback/repeat = false
playback/speed = 1.0
_sections_unfolded = [ "playback" ]


