[gd_scene load_steps=7 format=2]

[ext_resource path="res://Resources/ColorShader.shader" type="Shader" id=1]
[ext_resource path="res://Resources/StructureFont.tres" type="DynamicFont" id=2]

[sub_resource type="GDScript" id=1]
resource_name = "Structure"
script/source = "extends Area2D

const HALF_SIZE = 30
const FULL_SIZE = 60

# type of Game.STRUCTURE enum
var type
var ownerIdx

var PlaneHolder
var Destructable
var Consumer
var Producer

signal object_destroyed(object)
signal update_planes(object, planesData)

func destroy():
	emit_signal('object_destroyed', self)

func _init():
	Destructable = Game.Destructable.new(self)
	Consumer = Game.Consumer.new(self)
	Producer = Game.Producer.new(self)

func target_destroyed(target):
	Game.verbose(get_name() + ': Target destroyed')

func _Airport_create_data():
	PlaneHolder = Game.PlaneHolder.new(self)

# Register consumer, which will receive produced resource
func register_consumer(resource, consumer):
	Producer.add_consumer(resource, consumer)

func set_suplier(resource, suplier):
	Consumer.set_suplier(resource, suplier)

func random_position(ownerIdx):
	position.x = HALF_SIZE + Game.MAP_WIDTH/2*ownerIdx + randi() % (Game.MAP_WIDTH/2 - FULL_SIZE)
	position.y = HALF_SIZE + randi() % (Game.MAP_HEIGHT - FULL_SIZE)
	pass

func assign_type(strType, timer):
	var strDef = Game.structureDefinitions[strType]
	type = strDef.type
	if type == Game.STRUCTURE.AIRPORT || type == Game.STRUCTURE.CITY:
		$Acronym.text = ''
	else:
		$Acronym.text = strDef.acronym
	timer.connect('timeout', self, '_timeout')
	for resource in strDef.consumes:
		Consumer.add(resource)
	for resource in strDef.produces:
		Producer.add_resource(resource)
	_call_type_function('create_data')

func get_type():
	return type

func get_name():
	return Game.playerDefinitions[ownerIdx].name + '.' + Game.structureDefinitions[type].name
	
func _ready():
	if get_parent().get_name() == 'Templates':
		return
	pass

func get_corners():
	var result = []
	result.append(Vector2(position.x-HALF_SIZE, position.y-HALF_SIZE))
	result.append(Vector2(position.x-HALF_SIZE, position.y+HALF_SIZE))
	result.append(Vector2(position.x+HALF_SIZE, position.y-HALF_SIZE))
	result.append(Vector2(position.x+HALF_SIZE, position.y+HALF_SIZE))
	return result

func _call_type_function(function, args=null):
	var strName = Game.structureDefinitions[type].name
	var callName = '_' + strName + '_' + function
	if has_method(callName):
		if args: call(callName, args)
		else: call(callName)

func pressed(world):
	_call_type_function('pressed', world)
	pass

func _timeout():
	Producer.timeout()
	_call_type_function('timeout')
	pass

func _Capital_timeout():
	_Bunker_timeout()


func _Bunker_timeout():
	if not Producer.has(Game.RESOURCE.ARMY):
		return
	var target = Game.getWorld().army_find_target(self)
	if target:
		Game.getWorld().army_start(self, target)
		Producer.consume(Game.RESOURCE.ARMY)
	pass

func _Airport_timeout():
	if not Consumer.has(Game.RESOURCE.AIRPLANE):
		return
	var assignPlaneType = []
	var planeCount = _Airport_count_planes()
	
	if planeCount[Game.PLANE.FIGHTER] < Game.CONFIGURATION.airportFighterLimit:
		assignPlaneType.append(Game.PLANE.FIGHTER)
	if planeCount[Game.PLANE.BOMBER] < Game.CONFIGURATION.airportBomberLimit:
		assignPlaneType.append(Game.PLANE.BOMBER)
		
	if assignPlaneType.empty():
		return
	
	var plane = Game.getWorld()._airplane_create(ownerIdx, assignPlaneType[randi() % assignPlaneType.size()])
	PlaneHolder.add_plane(plane)
	Consumer.consume(Game.RESOURCE.AIRPLANE)
	pass

func _Airport_count_planes():
	var fighterCount = 0
	var bomberCount = 0
	for plane in PlaneHolder.planes:
		if plane.type == Game.PLANE.FIGHTER: fighterCount += 1
		if plane.type == Game.PLANE.BOMBER: bomberCount += 1
	return {
			Game.PLANE.FIGHTER : fighterCount,
			Game.PLANE.BOMBER : bomberCount
		}

func _Airport_pressed(world):
	world.ui_squad_panel(self)

"

[sub_resource type="ShaderMaterial" id=2]
shader = ExtResource( 1 )
shader_param/color = Plane( 0, 0, 0, 1 )

[sub_resource type="ImageTexture" id=3]
flags = 0
flags = 0
size = Vector2( 60, 60 )

[sub_resource type="RectangleShape2D" id=4]
extents = Vector2( 20, 20 )

[node name="Structure" type="Area2D" groups=[
"Structure",
]]
position = Vector2( 68.0187, 77.5413 )
collision_mask = 0
script = SubResource( 1 )
__meta__ = {
"_edit_group_": true
}

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
texture = SubResource( 3 )

[node name="Collision" type="CollisionShape2D" parent="."]
shape = SubResource( 4 )

[node name="Acronym" type="Label" parent="."]
margin_right = 29.0
margin_bottom = 32.0
custom_fonts/font = ExtResource( 2 )
text = "C"

